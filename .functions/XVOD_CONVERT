#!/bin/bash

# DO NOT RUN AS ROOT !

# expects a VOD file in  /var/www/vod/<show>/<season>/source.<episode_num>.<original_filename>
# invoke as
#   $ XVOD_CONVERT [-review] [<show> [<season>]]
#
# NOTE using the -review flag will cause review transcodes to be made if missing or out-of-date; 
#      this can take a long time! The transcode is therefore not a default operation.
# NOTE The <show> name argument can be partial and the script will expand it with a '*' wildcard.
#      Convenient to only type 'Go' for Gotham (and not GameOfThrones).
# NOTE The <season> number is given as an integer, like '5'. specifying '05' is not needed.
#

#  !!! removes the file at the end of the process 

BASEDIR="/var/www/vod" ;

#
# FYI: this is how you lookup the source file from ep#; if not there, ${src_file} is empty:
#
#    src_file=`ls /var/www/vod/${show}/${season}/source.${ep_num}.* 2>/dev/null`
#

DO_REVIEW=0
if [ "${1}" == "-review" ]; then
	DO_REVIEW=1
	shift 1
fi

pushd ${BASEDIR} >/dev/null ;
shows=$(ls -1 -d $1* 2>/dev/null);
if [ $? -ne 0 ]; then
	echo "No show names matching ${1}* were found"
	exit 1
fi

for show in ${shows} ; do
	echo PROCESSING SHOW: $show
	pushd ${show} >/dev/null; # now in the directory of that specific shwo - like Game of Thrones 

	seasons=`ls -1 .` ; # find all seasons
	if [ $# -ge 2 ]; then
		# override if a specific season number given on command line
		n=`echo $2 | bc -l`    # interpret string to number ("003" param  --> 3)
		as_dir=`printf "%02d" ${n}` # format n to exact 2 digits, leading 0s.
		seasons=`ls -1 -d ${as_dir} 2>/dev/null`
		if [ $? -ne 0 ]; then
        		echo "Season ${n} not found for show ${show}"
		        exit 1
		fi
	fi
	for season in ${seasons} ;
	do
		echo '  PROCESSING SEASON' ${season}
		pushd ${season} >/dev/null;

	        sources=`ls -1 source.*` ; # find all episode sources
	        for source in ${sources} ;
        	do
			episode=`echo ${source} | cut -d \. -f 2`
			echo '    PROCESSING Episode:'  ${episode}, "("${source}")"
			REVIEW_FILE="review.${episode}.mp4"
			# see if review file out-of-date or missing
			if [ $DO_REVIEW -eq 1 ]; then
				if [ ${REVIEW_FILE} -ot ${source} ] ; then
					# missing or out-of-date
					echo '    making:' ${show}/${seasons}/${REVIEW_FILE}
					# invoke transcode
					/home/ubuntu/bin/shrink.sh ${source} ${REVIEW_FILE}
				else
        	                       	echo '    up-to-date:' ${show}/${season}/${REVIEW_FILE}
				fi
			fi
			PCM_FILE="${episode}.pcm"
			# see if PCM file is out-of-date or non-existent
			rm "${PCM_FILE}x" 2>/dev/null # clean up any old temp file from screwed up interrupts
			if [ ${PCM_FILE} -ot ${source} ]; then
                                # missing or out-of-date
                                echo "    making:  ${show}/${season}/${PCM_FILE}" ;
                                # make the pcm first to temp file. suppress overwrite query.
				avconv -loglevel warning -vn -y -i "${source}" -ac 1 -f s16le -acodec pcm_s16le -ar 48000 "${PCM_FILE}x" ;
#				vlc -I dummy "${source}" --verbose=1 --file-logging --logfile=vlc.log --sout "#transcode{vcodec=none,acodec=s16le,channels=1,samplerate=48000}:file{mux=raw,dst=${PCM_FILE}" vlc://quit ;
				if [ $? -ne 0 ]; then
					echo "PCM generation interrupted!"
					exit 1
				fi
				# Successful, so do atomic rename completed temp file
				mv "${PCM_FILE}x" "${PCM_FILE}"
                                chmod 777 ${PCM_FILE} ;
			else
                               	echo '    up-to-date:'  ${show}/${season}/${PCM_FILE}
			fi

			TCAI_FILE="${episode}.tcai"
			# see if tcai file is out-of-date or non-existent
                	if [ ${TCAI_FILE} -ot ${PCM_FILE} ]; then
				# missing or out-of-date
                                echo "    making:  ${show}/${season}/${TCAI_FILE}" ;
                                # generate the tcai file
                                /home/ubuntu/bin/pcm2tcai ${episode}.pcm ${episode}.tcai 20000123000000000000 > /dev/null
                                chmod 777 ${TCAI_FILE} ; 
                        else
                                echo "    up-to-date: ${show}/${season}/${TCAI_FILE}" ;
			fi
		 	echo "    processed episode ${episode}"

		done ; # all episodes done
	 	echo "  processed season: ${season}"

		popd >/dev/null ; # get out of this season
	done ; # all seasons done
 	echo "processed show: ${show}"

	popd >/dev/null; # get out of this show
done ; # all shows done

#
# END of derivative file creation / refreshing. Exiting.
#
exit 0


if [ "0" -gt "1" ] ;
then

# on the tcai that resulted from the concatenated file - find repeats
pushd /home/ubuntu/bin ;
# requires folder ctrl/ADS/ and generates cai files in there
# requires folder ctrl/Matches.log amd puts in the found recognitions
# also generates ctrl/ti_ms.findRepeats
# /home/ubuntu/bin/ctrl/channellogs/20000123 needs to hold the file 123.tcai 
# 123.tcai was produced by concatenation of the tcai files of each episode
rm -f ctrl/ADS/* ;
rm -f ctrl/ti_ms.findRepeats ;
rm -f ./ctrl/Matches.log ; touch ./ctrl/Matches.log ; chmod 777 ./ctrl/Matches.log ;

./findRepeats15 /home/ubuntu/bin/ctrl/channellogs/20000123/123.tcai

popd

fi
